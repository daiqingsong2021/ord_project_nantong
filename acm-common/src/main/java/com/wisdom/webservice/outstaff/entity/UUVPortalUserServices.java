package com.wisdom.webservice.outstaff.entity;

import com.wisdom.webservice.PropertiesLoaderUtils;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import java.net.MalformedURLException;
import java.net.URL;

/**
 * UUV外部用户服务
 *
 * This class was generated by Apache CXF 3.2.10
 * 2019-08-31T09:44:51.507+08:00
 * Generated source version: 3.2.10
 *
 */
@WebServiceClient(name = "UUVPortalUserServices",
                  wsdlLocation = "",
                  targetNamespace = "http://tempuri.org/")
public class UUVPortalUserServices extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://tempuri.org/", "UUVPortalUserServices");
    public final static QName UUVPortalUserServicesSoap12 = new QName("http://tempuri.org/", "UUVPortalUserServicesSoap12");
    public final static QName UUVPortalUserServicesSoap = new QName("http://tempuri.org/", "UUVPortalUserServicesSoap");
    static {
        URL url = null;
        String urlStr = null;
        try {
            PropertiesLoaderUtils prop = new PropertiesLoaderUtils("webServiceConfig.yml");
            urlStr = prop.getProperty("webservice.outstaff.url");
            url = new URL(urlStr);
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(UUVPortalUserServices.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", urlStr);
        }
        WSDL_LOCATION = url;
    }

    public UUVPortalUserServices(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public UUVPortalUserServices(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public UUVPortalUserServices() {
        super(WSDL_LOCATION, SERVICE);
    }

    public UUVPortalUserServices(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public UUVPortalUserServices(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public UUVPortalUserServices(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }




    /**
     *
     * @return
     *     returns UUVPortalUserServicesSoap
     */
    @WebEndpoint(name = "UUVPortalUserServicesSoap12")
    public UUVPortalUserServicesSoap getUUVPortalUserServicesSoap12() {
        return super.getPort(UUVPortalUserServicesSoap12, UUVPortalUserServicesSoap.class);
    }

    /**
     *
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns UUVPortalUserServicesSoap
     */
    @WebEndpoint(name = "UUVPortalUserServicesSoap12")
    public UUVPortalUserServicesSoap getUUVPortalUserServicesSoap12(WebServiceFeature... features) {
        return super.getPort(UUVPortalUserServicesSoap12, UUVPortalUserServicesSoap.class, features);
    }


    /**
     *
     * @return
     *     returns UUVPortalUserServicesSoap
     */
    @WebEndpoint(name = "UUVPortalUserServicesSoap")
    public UUVPortalUserServicesSoap getUUVPortalUserServicesSoap() {
        return super.getPort(UUVPortalUserServicesSoap, UUVPortalUserServicesSoap.class);
    }

    /**
     *
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns UUVPortalUserServicesSoap
     */
    @WebEndpoint(name = "UUVPortalUserServicesSoap")
    public UUVPortalUserServicesSoap getUUVPortalUserServicesSoap(WebServiceFeature... features) {
        return super.getPort(UUVPortalUserServicesSoap, UUVPortalUserServicesSoap.class, features);
    }

}
