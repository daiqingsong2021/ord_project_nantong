#nginx 进程数，建议设置为等于 CPU 总核心数。
worker_processes 4;
#nginx 默认没有开启利用多核 CPU, 通过增加 worker_cpu_affinity 配置参数来充分利用多核 CPU 以下是 4 核的配置参数
worker_cpu_affinity 00000001 00000010 00000100 00001000;
#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]
error_log /var/log/nginx/error.log;
error_log /var/log/nginx/info.log info;
error_log /var/log/nginx/notice.log notice;
#进程文件
#pid /var/run/nginx.pid;
#一个 nginx 进程打开的最多文件描述符数目，理论值应该是最多打开文件数（系统的值 ulimit -n）与 nginx 进程数相除，但是 nginx 分配请求并不均匀，所以建议与 ulimit -n 的值保持一致。
worker_rlimit_nofile 65535;
#工作模式与连接数上限
events
{
 #参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll 模型是 Linux 2.6 以上版本内核中的高性能网络 I/O 模型，如果跑在 FreeBSD 上面，就用 kqueue 模型。
 #epoll 是多路复用 IO(I/O Multiplexing) 中的一种方式，但是仅用于 linux2.6 以上内核，可以大大提高 nginx 的性能
 use epoll;
 ############################################################################
 #单个后台 worker process 进程的最大并发链接数
 #事件模块指令，定义 nginx 每个进程最大连接数，默认 1024。最大客户连接数由 worker_processes 和 worker_connections 决定
 #即 max_client=worker_processes*worker_connections, 在作为反向代理时：max_client=worker_processes*worker_connections / 4
 worker_connections 65535;
 ############################################################################
}
#设定 http 服务器
http {
    #设置日志格式
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;
    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    #请求头带有下划线
    underscores_in_headers on;
    #文件扩展名与文件类型映射表
    include mime.types;
    #默认文件类型 
    default_type application/octet-stream;
    #FastCGI 相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。
    fastcgi_connect_timeout 300;
    fastcgi_send_timeout 300;
    fastcgi_read_timeout 300;
    fastcgi_buffer_size 256k;
    fastcgi_buffers 2 256k;
    fastcgi_busy_buffers_size 256k;
    fastcgi_temp_file_write_size 256k;
    #允许客户端请求的最大单文件字节数
    client_max_body_size 50m;
    #长连接保持时间，它告诉 webserver 在处理完一个请求后保持这个 TCP 连接的打开状态，若将它设置为 0，就禁止了 keepalive 连接
    keepalive_timeout   120;
    server {
        listen       13000;
        listen       [::]:80 default_server;
        server_name  221.226.30.122 192.168.2.12;

        # Load configuration files for the default server block.
        include /etc/nginx/default.d/*.conf;

        #代理配置参数
        #nginx 跟后端服务器连接超时时间（代理连接超时）
        proxy_connect_timeout 2;
        #后端服务器数据回传时间（代理发送超时）
        proxy_send_timeout 2;
        #连接成功后，后端服务器响应时间（代理接收超时）
        proxy_read_timeout 30;
        #proxy_set_header Host $host;
        #后端的 Web 服务器可以通过 X-Forwarded-For 获取用户真实 IP
        proxy_set_header X-Forwarder-For $remote_addr;
        #proxy_redirect   off;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host:$server_port;
        proxy_cache_bypass $http_upgrade;
   
        location ^~ /api {
        proxy_pass http://acm_szxm; 
        }

        location ^~ /group1 {
        proxy_pass http://acm_files; 
        }

        location / {
        proxy_pass http://acm_nextjs;
        #rewrite ^/snlogin(.*)$ http://iepms.sz-mtr.com:8500/home break;
        }
        error_page 404 /404.html;
            location = /40x.html {
        }

        error_page 500 502 503 504 /50x.html;
            location = /50x.html {
        }
    }

    server {
        listen       8501;
        #listen       [::]:80 default_server;
        server_name  221.226.30.122 192.168.2.12;

        # Load configuration files for the default server block.
        include /etc/nginx/default.d/*.conf;

        #代理配置参数
        #nginx 跟后端服务器连接超时时间（代理连接超时）
        proxy_connect_timeout 20;
        #后端服务器数据回传时间（代理发送超时）
        proxy_send_timeout 20;
        #连接成功后，后端服务器响应时间（代理接收超时）
        proxy_read_timeout 20;
        #proxy_set_header Host $host;
        #后端的 Web 服务器可以通过 X-Forwarded-For 获取用户真实 IP
        proxy_set_header X-Forwarder-For $remote_addr;
        proxy_set_header Host $host:$server_port;
   
        location / {
        proxy_pass http://acm_flow; 
        }
        error_page 404 /404.html;
            location = /40x.html {
        }

        error_page 500 502 503 504 /50x.html;
            location = /50x.html {
        }
    }


    upstream acm_nextjs{
                #每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题，不能与weight一起用
                #ip_hash;
                #max_fail 允许请求失败的次数，默认为1 fail_timeout max_fail次失败后，暂停的时间
                #server 192.168.2.12:13000 max_fails=2 fail_timeout=600s;
                server 192.168.2.12:9000;
                #server 192.168.2.12:13000 max_fails=2 fail_timeout=600s;
    }
    upstream acm_szxm{
                #每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题，不能与weight一起用
                #ip_hash;
                #max_fail 允许请求失败的次数，默认为1 fail_timeout max_fail次失败后，暂停的时间
                server 192.168.2.12:8765;
    }
    upstream acm_flow{
                #每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题，不能与weight一起用
                #ip_hash;
                #max_fail 允许请求失败的次数，默认为1 fail_timeout max_fail次失败后，暂停的时间
                server 192.168.2.12:8784;
                #server 10.10.11.212:8784 weight=5 max_fails=2 fail_timeout=600s;
    }
    upstream acm_files{
                #每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题，不能与weight一起用
                #ip_hash;
                #max_fail 允许请求失败的次数，默认为1 fail_timeout max_fail次失败后，暂停的时间
                server 192.168.2.12:8080;
                #server 10.10.11.214:8080 weight=5 max_fails=2 fail_timeout=600s;
    }
}